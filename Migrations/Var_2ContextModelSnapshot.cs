// <auto-generated />
using System;
using BcuV0._3.Models.Scaffold1;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BcuV0._3.Migrations
{
    [DbContext(typeof(Var_2Context))]
    partial class Var_2ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BcuV0._3.Models.Scaffold1.Blogs", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("UserID")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("BcuV0._3.Models.Scaffold1.BlogsSections", b =>
                {
                    b.Property<int>("BlogId")
                        .HasColumnName("BlogID")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnName("SectionID")
                        .HasColumnType("int");

                    b.HasKey("BlogId", "SectionId");

                    b.HasIndex("SectionId");

                    b.ToTable("BlogsSections");
                });

            modelBuilder.Entity("BcuV0._3.Models.Scaffold1.Comments", b =>
                {
                    b.Property<int>("CommentId")
                        .HasColumnName("CommentID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnName("PostID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("UserID")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BcuV0._3.Models.Scaffold1.Posts", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("BcuV0._3.Models.Scaffold1.ReactTypes", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nchar(20)")
                        .IsFixedLength(true)
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("ReactTypes");
                });

            modelBuilder.Entity("BcuV0._3.Models.Scaffold1.Sections", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("BcuV0._3.Models.Scaffold1.SectionsPosts", b =>
                {
                    b.Property<int>("SectionId")
                        .HasColumnName("SectionID")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnName("PostID")
                        .HasColumnType("int");

                    b.HasKey("SectionId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("SectionsPosts");
                });

            modelBuilder.Entity("BcuV0._3.Models.Scaffold1.UserCommentReacts", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("CommentId")
                        .HasColumnName("CommentID")
                        .HasColumnType("int");

                    b.Property<int>("ReactId")
                        .HasColumnName("ReactID")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CommentId", "ReactId");

                    b.HasIndex("CommentId");

                    b.HasIndex("ReactId");

                    b.ToTable("UserCommentReacts");
                });

            modelBuilder.Entity("BcuV0._3.Models.Scaffold1.UserPostReacts", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("PostId")
                        .HasColumnName("PostID")
                        .HasColumnType("int");

                    b.Property<int>("ReactId")
                        .HasColumnName("ReactID")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PostId", "ReactId")
                        .HasName("PK_UserPostReacts_1");

                    b.HasIndex("PostId");

                    b.HasIndex("ReactId");

                    b.ToTable("UserPostReacts");
                });

            modelBuilder.Entity("BcuV0._3.Models.Scaffold1.Varuti", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("BlogId")
                        .HasColumnName("BlogID")
                        .HasColumnType("int");

                    b.Property<string>("Nume")
                        .HasColumnType("nchar(30)")
                        .IsFixedLength(true)
                        .HasMaxLength(30);

                    b.Property<string>("Prenume")
                        .HasColumnType("nchar(30)")
                        .IsFixedLength(true)
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Varuti");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("BcuV0._3.Models.Scaffold1.Blogs", b =>
                {
                    b.HasOne("BcuV0._3.Models.Scaffold1.Varuti", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Blogs_Varuti")
                        .IsRequired();
                });

            modelBuilder.Entity("BcuV0._3.Models.Scaffold1.BlogsSections", b =>
                {
                    b.HasOne("BcuV0._3.Models.Scaffold1.Blogs", "Blog")
                        .WithMany("BlogsSections")
                        .HasForeignKey("BlogId")
                        .HasConstraintName("FK_BlogsSections_Sections")
                        .IsRequired();

                    b.HasOne("BcuV0._3.Models.Scaffold1.Sections", "Section")
                        .WithMany("BlogsSections")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("FK_BlogsSections_Sections1")
                        .IsRequired();
                });

            modelBuilder.Entity("BcuV0._3.Models.Scaffold1.Comments", b =>
                {
                    b.HasOne("BcuV0._3.Models.Scaffold1.Posts", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_Comments_Posts")
                        .IsRequired();
                });

            modelBuilder.Entity("BcuV0._3.Models.Scaffold1.SectionsPosts", b =>
                {
                    b.HasOne("BcuV0._3.Models.Scaffold1.Posts", "Post")
                        .WithMany("SectionsPosts")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_SectionsPosts_Posts")
                        .IsRequired();

                    b.HasOne("BcuV0._3.Models.Scaffold1.Sections", "Section")
                        .WithMany("SectionsPosts")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("FK_SectionsPosts_Sections")
                        .IsRequired();
                });

            modelBuilder.Entity("BcuV0._3.Models.Scaffold1.UserCommentReacts", b =>
                {
                    b.HasOne("BcuV0._3.Models.Scaffold1.Comments", "Comment")
                        .WithMany("UserCommentReacts")
                        .HasForeignKey("CommentId")
                        .HasConstraintName("FK_UserCommentReacts_Comments")
                        .IsRequired();

                    b.HasOne("BcuV0._3.Models.Scaffold1.ReactTypes", "React")
                        .WithMany("UserCommentReacts")
                        .HasForeignKey("ReactId")
                        .HasConstraintName("FK_UserCommentReacts_ReactTypes")
                        .IsRequired();

                    b.HasOne("BcuV0._3.Models.Scaffold1.Varuti", "User")
                        .WithMany("UserCommentReacts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserCommentReacts_Varuti")
                        .IsRequired();
                });

            modelBuilder.Entity("BcuV0._3.Models.Scaffold1.UserPostReacts", b =>
                {
                    b.HasOne("BcuV0._3.Models.Scaffold1.Posts", "Post")
                        .WithMany("UserPostReacts")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_UserPostReacts_Posts")
                        .IsRequired();

                    b.HasOne("BcuV0._3.Models.Scaffold1.ReactTypes", "React")
                        .WithMany("UserPostReacts")
                        .HasForeignKey("ReactId")
                        .HasConstraintName("FK_UserPostReacts_ReactTypes")
                        .IsRequired();

                    b.HasOne("BcuV0._3.Models.Scaffold1.Varuti", "User")
                        .WithMany("UserPostReacts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserPostReacts_Varuti")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
